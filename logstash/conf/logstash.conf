input { 
  #stdin { } 
  file {
    path => "/opt/nsm/bro/logs/current/*.log"   
  }
  file {
    path => "/var/log/sweetsecurity.log"
  }
  file {
    path => "/var/log/kern.log"
  }
}

filter {
  if [path] == "/var/log/kern.log" {
    if [message] =~ /^(\w{3}\s\d+\s\d+:\d\d:\d\d\s\w+\skernel:\s\[\d+\.\d+\]\sIPTables-Dropped\:.*)/ {
      grok {
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{kernLog}"
        }
      }
    }
  }

  if ([message] =~ /^#/) {
    drop{}
  }
  if [path] == "/opt/nsm/bro/logs/current/capture_loss.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{captureLossLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/communication.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{communicationLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/conn.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{connLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/dhcp.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{dhcpLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/dns.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{dnsLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/dpd.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{dpdLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/files.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{filesLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/ftp.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{ftpLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/http.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{httpLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/intel.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{intelLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/known_services.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{knownServicesLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/notice.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{noticeLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/packet_filter.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{packetFilterLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/pe.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{peLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/reporter.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{reporterLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/signatures.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{signaturesLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/smtp.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{smtpLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/software.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{softwareLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/ssh.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{sshLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/ssl.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{sslLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/stats.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{statsLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/tunnel.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{tunnelLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/weird.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{weirdLog}"
      }
    }
  }
  else if [path] == "/opt/nsm/bro/logs/current/x509.log" {
    grok{
      patterns_dir => "/etc/logstash/custom_patterns"
      match => {
        message => "%{x509Log}"
      }
    }
  }
  
  if [path] == "/var/log/sweetsecurity.log"{
    if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sNew\sdevice\sdiscovered\:\shostname=([^,\s]+),\sip=([^,\s]+),\s([^,\s]+),\svendor=(.*))/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssNewDeviceLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sDevice\sScanned\:\s.*)/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssDeviceScanLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sUpdate\shostname\sof\sdevice\s([^\s]+)\sfrom\s([^\s]+)\sto\s(.*))/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssUpdateHostnameLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sUpdate\sip\sof\sdevice\s([^\s]+)\sfrom\s([^\s]+)\sto\s(.*))/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssUpdateIpLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sLogstash\sHealth=\"([^\"]+)\".*)/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssLogstashHealthLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sBro\sHealth\s=\s\"([^\"]+)\".*)/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssBroHealthLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sDisk\sPercentage\sAvailable\:\s(\d+).*)/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssDiskUsageLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sMemory Available\s=\s\"(\d+)\",\sMemory\sConsumed\s\=\s\"(\d+)\"\,\sPercent\sUsed\s\=\s\"(\d+)\".*)/ {
      grok{
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssMemUsageLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\s(Port\sscanning)\s(.*))/ {
      grok {
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssPortScanLog}"
        }
      }
    }
    else if [message] =~ /^(\d+\-\d\d\-\d\d\s\d\d\:\d\d\:\d\d\,\d+\:\sSpoofing\sDevice\:\sip=([^\s]+)\,\smac=(.*))/ {
      grok {
        patterns_dir => "/etc/logstash/custom_patterns"
        match => {
          message => "%{ssSpoofLog}"
        }
      }
    }
  }
  
  geoip { 
    source => "orig_h"
    target => "geoip_src"
  }
  geoip {
    source => "resp_h"
    target => "geoip_dst"
  }
  translate { 
    field => "orig_h"
    destination => "tor_IP"
    dictionary_path => '/etc/logstash/translate/torIP.yaml'
  }
  translate { 
    field => "resp_h"
    destination => "tor_IP"
    dictionary_path => '/etc/logstash/translate/torIP.yaml'
  }  
  translate { 
    field => "orig_h"
    destination => "malicious_IP"
    dictionary_path => '/etc/logstash/translate/maliciousIP.yaml'
  }
  translate { 
    field => "resp_h"
    destination => "malicious_IP"
    dictionary_path => '/etc/logstash/translate/maliciousIP.yaml'
  }  
  date {
    match => [ "ts", "UNIX" ]
  }

  mutate {
    convert => { "active_dns_requests" => "integer" }
    convert => { "active_files" => "integer" }
    convert => { "active_icmp_conns" => "integer" }
    convert => { "active_tcp_conns" => "integer" }
    convert => { "active_timers" => "integer" }
    convert => { "active_udp_conns" => "integer" }
    convert => { "bytes_recv" => "integer" }
    convert => { "diskUsage" => "integer" }
    convert => { "files" => "integer" }
    convert => { "mem" => "integer" }
    convert => { "memAvailable" => "integer" }
    convert => { "memConsumed" => "integer" }
    convert => { "memPercentUsed" => "integer" }
    convert => { "missed_bytes" => "integer" }
    convert => { "orig_bytes" => "integer" }
    convert => { "orig_ip_bytes" => "integer" }
    convert => { "orig_pkts" => "integer" }
    convert => { "pkts_dropped" => "integer" }
    convert => { "pkts_link" => "integer" }
    convert => { "pkts_proc" => "integer" }
    convert => { "reassem_file_size" => "integer" }
    convert => { "reassem_frag_size" => "integer" }
    convert => { "reassem_tcp_size" => "integer" }
    convert => { "reassem_unknown_size" => "integer" }
    convert => { "resp_bytes" => "integer" }
    convert => { "resp_ip_bytes" => "integer" }
    convert => { "resp_pkts" => "integer" }
    convert => { "tcp_conns" => "integer" }
    convert => { "timers" => "integer" }
    convert => { "udp_conns" => "integer" }
  }
}

output {
  #stdout { 
  #  codec => rubydebug 
  #}

email_block

  elasticsearch { 
    hosts => localhost 
    ssl => true
    ssl_certificate_verification => false
  } 
}
